[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ctwin32"
description = "Access selected win32 APIs through ctypes"
authors = [{name = "Rocco Matano"}]
requires-python = ">=3.8"
license = {text = "MIT License"}
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Operating System :: Microsoft :: Windows",
    "Environment :: Win32 (MS Windows)",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    ]
dynamic = ["version", "readme"]

[project.urls]
homepage = "https://github.com/RoccoMatano/ctwin32"
changelog = "https://github.com/RoccoMatano/ctwin32/blob/master/changelog.md"

################################################################################

[tool.setuptools]
packages = ["ctwin32"]

[tool.setuptools.dynamic]
version = {attr = "ctwin32.__version__"}
readme = {file = ["README.md"], content-type = "text/markdown"}

################################################################################

[tool.ruff]
target-version = "py38"
line-length = 80

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "A001",     # shadowing a Python builtin
    "A002",     # shadowing a Python builtin
    "ANN001",   # no dorky typing!!!
    "ANN002",   # no dorky typing!!!
    "ANN003",   # no dorky typing!!!
    "ANN101",   # no dorky typing!!!
    "ANN102",   # no dorky typing!!!
    "ANN201",   # no dorky typing!!!
    "ANN202",   # no dorky typing!!!
    "ANN204",   # no dorky typing!!!
    "ANN205",   # no dorky typing!!!
    "ANN206",   # no dorky typing!!!
    "ANN401",   # no dorky typing!!!
    "ARG001",   # not using a parameter of a win32 API is very common
    "ARG002",   # not using a parameter of a win32 API is very common
    "C901",     # complex-structure
    "COM812",   # Trailing comma missing
    "COM819",   # prohibited-trailing-comma
    "D100",     # doc strings are optional
    "D101",     # doc strings are optional
    "D102",     # doc strings are optional
    "D103",     # doc strings are optional
    "D104",     # doc strings are optional
    "D105",     # doc strings are optional
    "D107",     # doc strings are optional
    "D203",     # doc strings are optional
    "D204",     # force doc string layout
    "D205",     # force doc string layout
    "D211",     # rule confusion
    "D212",     # force doc string layout
    "D213",     # rule confusion
    "D300",     # force doc string layout
    "D400",     # force doc string layout
    "D401",     # force doc string layout
    "D403",     # force doc string layout
    "D404",     # force doc string layout
    "D415",     # force doc string layout
    "EM101",    # total BS
    "EM102",    # use of f-strings in exception constructors
    "ERA001",   # Prone to false positives
    "FBT002",   # boolean-default-value-positional-argument
    "FBT003",   # boolean-positional-value-in-call
    "G004",     # logging f-strings is not that bad
    "I001",     # tastes differ
    "ISC003",   # Explicitly concatenated string should be implicitly concatenated
    "N801",     # pep8 naming is not meant to be used everywhere
    "N802",     # pep8 naming is not suitable for Win32
    "N803",     # pep8 naming is not suitable for Win32
    "N806",     # pep8 naming is not meant to be used everywhere
    "N813",     # aliases are meant to assign differing names
    "N816",     # pep8 naming is not meant to be used everywhere
    "N818",     # pep8 naming is not meant to be used everywhere
    "PERF203",  # try-except-in-loop
    "PLW1510",  # `subprocess.run` without explicit `check` argument
    "PLR0912",  # too many branches
    "PLR0913",  # some Win32 APIs have a lot of arguments
    "PLR2004",  # avoiding magic values is good, banning them is bad
    "PTH123",   # open() should be replaced by Path.open()
    "PYI024",   # no dorky typing!!!
    "RSE102",   # Unnecessary parentheses on raised exception
    "RET505",   # Unnecessary {branch} after return statement
    "RET508",   # Unnecessary {branch} after break statement
    "S101",     # Prone to false positives
    "S105",     # Prone to false positives
    "S602",     # Prone to false positives
    "S603",     # Prone to false positives
    "S607",     # sometimes partial paths are the right thing
    "SIM102",   # Use a single if statement instead of nested if statements
    "SIM117",   # Use a single instead of nested `with` statements
    "SLF001",   # ctypes requires accessing private members
    "T201",     # Prone to false positives
    "T203",     # Prone to false positives
    "TRY003",   # do not bloat code with unnecessary exception classes
    "TRY301",   # raise-within-try
    "UP015",    # redundant-open-modes
    "UP039",    # unnecessary-class-parentheses
    "RUF012",   # ... should be annotated -> no dorky typing!!!
    "RUF013",   # implicit-optional -> no dorky typing!!!
    ]

################################################################################
